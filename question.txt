q1. Create a program to store and print a person's and their project's details. Declare and initialize variables for the following details,
    Project name (string)
    Code lines written (uint8)
    Bugs found (int)
    Is the project complete? (bool)
    Average lines of code written per hour (float64)
    Team lead name (string)
    Project deadline in days (int)
    Additionally, demonstrate a uint overflow by initializing the largest possible value for uint
    and then adding 1 to it

    // try to use fmt.Printf instead of println
    pkg.go.dev // fmt

q2. Create a stringops package with three files.
         The package should export one function that utilizes internal (unexported) functions.

         Files in stringops Package:
         File 1: strings.go
         Exported Function: TrimSpaceAndUppercase(s1, s2 string)
         File 2: upper.go
         Internal Function: toUpperCase(s string) string
         File 3: trim.go
         Internal Function: trimSpace(s string) string


q3. Create the following directory structure
                app-/
                    ├──stores/
                    │  └── store.go // interface is placed inside this file
                       └── models.go // to store domain structs // user struct
                    │    ├── mysql/
                    │    │   └── mysql.go
                    │    ├── postgres/
                    │       └── postgres.go
                    └── main.go
                    ├── go.mod

        In mysql.go create a Conn struct which stores db connection in string form
        Create three methods over Conn struct (Create(user) error, Update(name) error, Delete(id) error
        //Note:- return nil for the errors, assume no error would happen
        //For now add simple print statement without doing any actual work

        In postgres.go repeat the same steps as we did in mysql.go

        In store.go
            Create an interface that postgres and mysql package can implement

        In main.go
            Call postgres and mysql package methods using interface variable


q4. Create a struct (Author)
        Two Field:- Name, Books[slice]
        Create two methods, one appends new books to the book slice , other prints the struct

        Create a function that accepts the struct and append values to the book slice

        Create a function that would accept the Books field, not the struct and append some more books

q5. q3. Create 4 functions
        Add(int,int),Sub(int,int),Divide(int,int), CollectResults()
        Add,Sub,Divide do their operations and send value to an unbuffered channel

        CollectResult() -> It would receive the values from the channel and print it