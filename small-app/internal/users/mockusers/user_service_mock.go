// Code generated by MockGen. DO NOT EDIT.
// Source: user_service.go
//
// Generated by this command:
//
//	mockgen -source user_service.go -destination mockusers/user_service_mock.go -package mockusers
//

// Package mockusers is a generated GoMock package.
package mockusers

import (
	reflect "reflect"
	users "small-app/internal/users"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatUser mocks base method.
func (m *MockStore) CreatUser(arg0 users.NewUser) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatUser indicates an expected call of CreatUser.
func (mr *MockStoreMockRecorder) CreatUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatUser", reflect.TypeOf((*MockStore)(nil).CreatUser), arg0)
}

// FetchUsers mocks base method.
func (m *MockStore) FetchUsers() map[string]users.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUsers")
	ret0, _ := ret[0].(map[string]users.User)
	return ret0
}

// FetchUsers indicates an expected call of FetchUsers.
func (mr *MockStoreMockRecorder) FetchUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUsers", reflect.TypeOf((*MockStore)(nil).FetchUsers))
}
